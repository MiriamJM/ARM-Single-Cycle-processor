#include <stdint.h>

#define GPIO_PORTF_DATA_R (*((volatile unsigned long *)0x400253FC))
#define GPIO_PORTF_DIR_R (*((volatile unsigned long *)0x40025400))
#define GPIO_PORTF_AFSEL_R (*((volatile unsigned long *)0x40025420))
#define GPIO_PORTF_PUR_R (*((volatile unsigned long *)0x40025510))
#define GPIO_PORTF_DEN_R (*((volatile unsigned long *)0x4002551C))
#define GPIO_PORTF_LOCK_R (*((volatile unsigned long *)0x40025520))
#define GPIO_PORTF_CR_R (*((volatile unsigned long *)0x40025524))
#define GPIO_PORTF_AMSEL_R (*((volatile unsigned long *)0x40025528))
#define GPIO_PORTF_PCTL_R (*((volatile unsigned long *)0x4002552C))
#define SYSCTL_RCGC2_R (*((volatile unsigned long *)0x400FE108))

// global variables
unsigned long SW1; // input from PF4
unsigned long SW2; // input from PF0

// functions
void PortF_Init(void);
void FlashSOS(void);
void delay(unsigned long halfsecs);

//initialize port F pins for input and output, PF4 input SW1, PF2 output Blue LED
void PortF_Init(void)
{
  volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000020; // 1) F clock
  delay = SYSCTL_RCGC2_R; // delay
  GPIO_PORTF_LOCK_R = 0x4C4F434B; // 2) unlock PortF PF0
  GPIO_PORTF_CR_R |= 0x1F; // allow changes to PF4-0
  GPIO_PORTF_AMSEL_R &= 0x00; // 3) disable analog function
  GPIO_PORTF_PCTL_R &= 0x00000000; // 4) GPIO clear bit PCTL
  GPIO_PORTF_DIR_R &= ~0x11; // 5.1) PF4,PF0 input,
  GPIO_PORTF_DIR_R |= 0x08; // 5.2) PF3 output
  GPIO_PORTF_AFSEL_R &= ~0x1F; // 6) no alternate functions
  GPIO_PORTF_PUR_R |= 0x11; // enable pullup resistors on PF4,PF0
  GPIO_PORTF_DEN_R |= 0x1F; // 7) enable digital pins PF4-PF0
}

//PF3 is green LED: SOS
void FlashSOS(void)
{
  //S
  GPIO_PORTF_DATA_R |= 0x08; delay(1);
  GPIO_PORTF_DATA_R &= ~0x08; delay(1);
  GPIO_PORTF_DATA_R |= 0x08; delay(1);
  GPIO_PORTF_DATA_R &= ~0x08; delay(1);
  GPIO_PORTF_DATA_R |= 0x08; delay(1);
  GPIO_PORTF_DATA_R &= ~0x08; delay(1);

  //O
  GPIO_PORTF_DATA_R |= 0x08; delay(4);
  GPIO_PORTF_DATA_R &= ~0x08;delay(4);
  GPIO_PORTF_DATA_R |= 0x08; delay(4);
  GPIO_PORTF_DATA_R &= ~0x08;delay(4);
  GPIO_PORTF_DATA_R |= 0x08; delay(4);
  GPIO_PORTF_DATA_R &= ~0x08;delay(4);

  //S
  GPIO_PORTF_DATA_R |= 0x08; delay(1);
  GPIO_PORTF_DATA_R &= ~0x08;delay(1);
  GPIO_PORTF_DATA_R |= 0x08; delay(1);
  GPIO_PORTF_DATA_R &= ~0x08;delay(1);
  GPIO_PORTF_DATA_R |= 0x08; delay(1);
  GPIO_PORTF_DATA_R &= ~0x08;delay(1);
  delay(10); // Delay for 5 secs in between flashes 
}

// function to delay in units of half seconds
void delay (unsigned long halfsecs)
{
  unsigned long count;
  while(halfsecs > 0 ) 
  { // repeat while still halfsecs to delay
  count = 1538460;
// originally count was 400000, which took 0.13 sec to complete
// later we change it to 400000*0.5/0.13=1538460 that it takes 0.5 sec
  while (count > 0) 
  {
  count--;
  } // This while loop takes approximately 3 cycles
  halfsecs--;
  }
}


int main(void)
{
  PortF_Init(); // initialize port PF4, PF2, PF0
  while (1)
  {
    do 
    {
      SW1 =  GPIO_PORTF_DATA_R&0x10; // PF4 into SW1
    } 
    while (SW1 == 0x10);
    do
    {
      FlashSOS();
      SW2 = GPIO_PORTF_DATA_R&0x01; // PF0 into SW2
    }
    while(SW2 == 0x01);
}
      
  }